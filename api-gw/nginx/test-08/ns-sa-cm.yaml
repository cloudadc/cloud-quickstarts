apiVersion: v1
kind: Namespace
metadata:
  name: test-08
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress 
  namespace: test-08
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-config
  namespace: test-08
data:
  main-template: |
    # Author: Kylin SONG
    worker_processes  {{.WorkerProcesses}};
    {{- if .WorkerRlimitNofile}}
    worker_rlimit_nofile {{.WorkerRlimitNofile}};{{end}}
    {{- if .WorkerCPUAffinity}}
    worker_cpu_affinity {{.WorkerCPUAffinity}};{{end}}
    {{- if .WorkerShutdownTimeout}}
    worker_shutdown_timeout {{.WorkerShutdownTimeout}};{{end}}
    
    daemon off;
    
    error_log  stderr {{.ErrorLogLevel}};
    pid        /var/lib/nginx/nginx.pid;
    
    {{- if .OpenTracingLoadModule}}
    load_module modules/ngx_http_opentracing_module.so;
    {{- end}}
    {{- if .AppProtectLoadModule}}
    load_module modules/ngx_http_app_protect_module.so;
    {{- end}}
    {{- if .AppProtectDosLoadModule}}
    load_module modules/ngx_http_app_protect_dos_module.so;
    {{- end}}
    {{- if .MainSnippets}}
    {{range $value := .MainSnippets}}
    {{$value}}{{end}}
    {{- end}}
    
    {{if .OIDC}}
    load_module modules/ngx_http_js_module.so;
    {{- end}}
    
    events {
        worker_connections  {{.WorkerConnections}};
    }
    
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
    
        {{- if .HTTPSnippets}}
        {{range $value := .HTTPSnippets}}
        {{$value}}{{end}}
        {{- end}}
    
        {{if .LogFormat -}}
        log_format  main {{if .LogFormatEscaping}}escape={{ .LogFormatEscaping }} {{end}}
                         {{range $i, $value := .LogFormat -}}
                         {{with $value}}'{{if $i}} {{end}}{{$value}}'
                         {{end}}{{end}};
        {{- else -}}
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        {{- end}}
    
        map $upstream_trailer_grpc_status $grpc_status {
            default $upstream_trailer_grpc_status;
            '' $sent_http_grpc_status;
        }
    
        {{- if .AppProtectDosLoadModule}}
        {{- if .AppProtectDosLogFormat}}
        log_format  log_dos {{if .AppProtectDosLogFormatEscaping}}escape={{ .AppProtectDosLogFormatEscaping }} {{end}}
                        {{range $i, $value := .AppProtectDosLogFormat -}}
                        {{with $value}}'{{if $i}} {{end}}{{$value}}'
                        {{end}}{{end}};
        {{- else -}}
        log_format  log_dos ', vs_name_al=$app_protect_dos_vs_name, ip=$remote_addr, tls_fp=$app_protect_dos_tls_fp, '
                            'outcome=$app_protect_dos_outcome, reason=$app_protect_dos_outcome_reason, '
                            'ip_tls=$remote_addr:$app_protect_dos_tls_fp, ';
    
        {{- end}}
        {{- if .AppProtectDosArbFqdn}}
        app_protect_dos_arb_fqdn {{.AppProtectDosArbFqdn}};
        {{- end}}
        {{- end}}
    
        {{if .AccessLogOff}}
        access_log off;
        {{else}}
        access_log  /dev/stdout  main;
        {{end}}
    
        {{if .LatencyMetrics}}
        log_format response_time '{"upstreamAddress":"$upstream_addr", "upstreamResponseTime":"$upstream_response_time", "proxyHost":"$proxy_host", "upstreamStatus": "$upstream_status"}';
        access_log syslog:server=unix:/var/lib/nginx/nginx-syslog.sock,nohostname,tag=nginx response_time;
        {{end}}
    
        {{- if .AppProtectLoadModule}}
        {{if .AppProtectFailureModeAction}}app_protect_failure_mode_action {{.AppProtectFailureModeAction}};{{end}}
        {{if .AppProtectCompressedRequestsAction}}app_protect_compressed_requests_action {{.AppProtectCompressedRequestsAction}};{{end}}
        {{if .AppProtectCookieSeed}}app_protect_cookie_seed {{.AppProtectCookieSeed}};{{end}}
        {{if .AppProtectCPUThresholds}}app_protect_cpu_thresholds {{.AppProtectCPUThresholds}};{{end}}
        {{if .AppProtectPhysicalMemoryThresholds}}app_protect_physical_memory_util_thresholds {{.AppProtectPhysicalMemoryThresholds}};{{end}}
        {{if .AppProtectReconnectPeriod}}app_protect_reconnect_period_seconds {{.AppProtectReconnectPeriod}};{{end}}
        include /etc/nginx/waf/nac-usersigs/index.conf;
        {{- end}}
    
        sendfile        on;
        #tcp_nopush     on;
    
        keepalive_timeout {{.KeepaliveTimeout}};
        keepalive_requests {{.KeepaliveRequests}};
    
        #gzip  on;
    
        server_names_hash_max_size {{.ServerNamesHashMaxSize}};
        {{if .ServerNamesHashBucketSize}}server_names_hash_bucket_size {{.ServerNamesHashBucketSize}};{{end}}
    
        variables_hash_bucket_size {{.VariablesHashBucketSize}};
        variables_hash_max_size {{.VariablesHashMaxSize}};

        keyval_zone zone=tableKV:64k;
        keyval key1 $value1 zone=tableKV;
        keyval key2 $value2 zone=tableKV;
        keyval key3 $value3 zone=tableKV;
    
        map $request_uri $request_uri_no_args {
            "~^(?P<path>[^?]*)(\?.*)?$" $path;
        }
    
        map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
        }
        map $http_upgrade $vs_connection_header {
            default upgrade;
            ''      $default_connection_header;
        }
        {{if .SSLProtocols}}ssl_protocols {{.SSLProtocols}};{{end}}
        {{if .SSLCiphers}}ssl_ciphers "{{.SSLCiphers}}";{{end}}
        {{if .SSLPreferServerCiphers}}ssl_prefer_server_ciphers on;{{end}}
        {{if .SSLDHParam}}ssl_dhparam {{.SSLDHParam}};{{end}}
    
        {{if .OpenTracingEnabled}}
        opentracing on;
        {{end}}
        {{if .OpenTracingLoadModule}}
        opentracing_load_tracer {{ .OpenTracingTracer }} /var/lib/nginx/tracer-config.json;
        {{end}}
    
        {{if .ResolverAddresses}}
        resolver {{range $resolver := .ResolverAddresses}}{{$resolver}}{{end}}{{if .ResolverValid}} valid={{.ResolverValid}}{{end}}{{if not .ResolverIPV6}} ipv6=off{{end}};
        {{if .ResolverTimeout}}resolver_timeout {{.ResolverTimeout}};{{end}}
        {{end}}
    
        {{if .OIDC}}
        include oidc/oidc_common.conf;
        {{- end}}
    
        server {
            # required to support the Websocket protocol in VirtualServer/VirtualServerRoutes
            set $default_connection_header "";
            set $resource_type "";
            set $resource_name "";
            set $resource_namespace "";
            set $service "";
    
            listen 80 default_server{{if .ProxyProtocol}} proxy_protocol{{end}};
            {{if not .DisableIPV6}}listen [::]:80 default_server{{if .ProxyProtocol}} proxy_protocol{{end}};{{end}}
    
            {{if .TLSPassthrough}}
            listen unix:/var/lib/nginx/passthrough-https.sock ssl default_server{{if .HTTP2}} http2{{end}} proxy_protocol;
            set_real_ip_from unix:;
            real_ip_header proxy_protocol;
            {{else}}
            listen 443 ssl default_server{{if .HTTP2}} http2{{end}}{{if .ProxyProtocol}} proxy_protocol{{end}};
            {{if not .DisableIPV6}}listen [::]:443 ssl default_server{{if .HTTP2}} http2{{end}}{{if .ProxyProtocol}} proxy_protocol{{end}};{{end}}
            {{end}}
    
            {{if .SSLRejectHandshake}}
            ssl_reject_handshake on;
            {{else}}
            ssl_certificate /etc/nginx/secrets/default;
            ssl_certificate_key /etc/nginx/secrets/default;
            {{end}}
    
            {{range $setRealIPFrom := .SetRealIPFrom}}
            set_real_ip_from {{$setRealIPFrom}};{{end}}
            {{if .RealIPHeader}}real_ip_header {{.RealIPHeader}};{{end}}
            {{if .RealIPRecursive}}real_ip_recursive on;{{end}}
    
            server_name _;
            server_tokens "{{.ServerTokens}}";
            {{if .DefaultServerAccessLogOff}}
            access_log off;
            {{end}}
    
            {{if .OpenTracingEnabled}}
            opentracing off;
            {{end}}
    
            {{if .HealthStatus}}
            location {{.HealthStatusURI}} {
                default_type text/plain;
                return 200 "healthy\n";
            }
            {{end}}
    
            location / {
                return {{.DefaultServerReturn}};
            }
        }
    
        {{- if .NginxStatus}}
        # NGINX Plus APIs
        server {
            listen {{.NginxStatusPort}};
            {{if not .DisableIPV6}}listen [::]:{{.NginxStatusPort}};{{end}}
    
            root /usr/share/nginx/html;
    
            access_log off;
    
            {{if .OpenTracingEnabled}}
            opentracing off;
            {{end}}
    
            location  = /dashboard.html {
            }
            {{range $value := .NginxStatusAllowCIDRs}}
            allow {{$value}};{{end}}
    
            deny all;
            location /api {
                api write=on;
            }
        }
        {{- end}}
    
        # NGINX Plus API over unix socket
        server {
            listen unix:/var/lib/nginx/nginx-plus-api.sock;
            access_log off;
    
            {{if .OpenTracingEnabled}}
            opentracing off;
            {{end}}
    
            # $config_version_mismatch is defined in /etc/nginx/config-version.conf
            location /configVersionCheck {
                if ($config_version_mismatch) {
                    return 503;
                }
                return 200;
            }
    
            location /api {
                api write=on;
            }
        }
    
        include /etc/nginx/config-version.conf;
        include /etc/nginx/conf.d/*.conf;
    
        server {
            listen unix:/var/lib/nginx/nginx-418-server.sock;
            access_log off;
    
            {{if .OpenTracingEnabled}}
            opentracing off;
            {{end}}
    
            return 418;
        }
        {{if .InternalRouteServer}}
        server {
            listen 443 ssl;
            {{if not .DisableIPV6}}listen [::]:443 ssl;{{end}}
            server_name {{.InternalRouteServerName}};
            ssl_certificate /etc/nginx/secrets/spiffe_cert.pem;
            ssl_certificate_key /etc/nginx/secrets/spiffe_key.pem;
            ssl_client_certificate /etc/nginx/secrets/spiffe_rootca.pem;
            ssl_verify_client on;
            ssl_verify_depth 25;
        }
        {{end}}
    }
    
    stream {
        {{if .StreamLogFormat -}}
        log_format  stream-main {{if .StreamLogFormatEscaping}}escape={{ .StreamLogFormatEscaping }} {{end}}
                                {{range $i, $value := .StreamLogFormat -}}
                                {{with $value}}'{{if $i}} {{end}}{{$value}}'
                                {{end}}{{end}};
        {{- else -}}
        log_format  stream-main  '$remote_addr [$time_local] '
                          '$protocol $status $bytes_sent $bytes_received '
                          '$session_time "$ssl_preread_server_name"';
        {{- end}}
    
        access_log  /dev/stdout  stream-main;
    
        {{range $value := .StreamSnippets}}
        {{$value}}{{end}}
    
        {{if .ResolverAddresses}}
        resolver {{range $resolver := .ResolverAddresses}}{{$resolver}}{{end}}{{if .ResolverValid}} valid={{.ResolverValid}}{{end}}{{if not .ResolverIPV6}} ipv6=off{{end}};
        {{if .ResolverTimeout}}resolver_timeout {{.ResolverTimeout}};{{end}}
        {{end}}
    
        {{if .TLSPassthrough}}
        map $ssl_preread_server_name $dest_internal_passthrough  {
            default unix:/var/lib/nginx/passthrough-https.sock;
            include /etc/nginx/tls-passthrough-hosts.conf;
        }
    
        server {
            listen 443{{if .ProxyProtocol}} proxy_protocol{{end}};
            {{if not .DisableIPV6}}listen [::]:443{{if .ProxyProtocol}} proxy_protocol{{end}};{{end}}
    
            ssl_preread on;
    
            proxy_protocol on;
            proxy_pass $dest_internal_passthrough;
        }
        {{end}}
    
        include /etc/nginx/stream-conf.d/*.conf;
    }
  ingress-template: |
    # Author: Kylin SONG
    # configuration for {{.Ingress.Namespace}}/{{.Ingress.Name}}
    {{range $upstream := .Upstreams}}
    upstream {{$upstream.Name}} {
            zone {{$upstream.Name}} {{if ne $upstream.UpstreamZoneSize "0"}}{{$upstream.UpstreamZoneSize}}{{else}}512k{{end}};
            {{if $upstream.LBMethod }}{{$upstream.LBMethod}};{{end}}
            {{range $server := $upstream.UpstreamServers}}
            server {{$server.Address}} max_fails={{$server.MaxFails}} fail_timeout={{$server.FailTimeout}} max_conns={{$server.MaxConns}}
                {{- if $server.SlowStart}} slow_start={{$server.SlowStart}}{{end}}{{if $server.Resolve}} resolve{{end}};{{end}}
            {{if $upstream.StickyCookie}}
            sticky cookie {{$upstream.StickyCookie}};
            {{end}}
            {{if $.Keepalive}}keepalive {{$.Keepalive}};{{end}}
            {{- if $upstream.UpstreamServers -}}
            {{- if $upstream.Queue}}
            queue {{$upstream.Queue}} timeout={{$upstream.QueueTimeout}}s;
            {{- end -}}
            {{- end}}
    }
    {{- end}}
    
    {{range $server := .Servers}}
    server {
            {{if $server.SpiffeCerts}}
            listen 443 ssl;
            {{if not $server.DisableIPV6}}listen [::]:443 ssl;{{end}}
            ssl_certificate /etc/nginx/secrets/spiffe_cert.pem;
            ssl_certificate_key /etc/nginx/secrets/spiffe_key.pem;
            {{else}}
            {{if not $server.GRPCOnly}}
            {{range $port := $server.Ports}}
            listen {{$port}}{{if $server.ProxyProtocol}} proxy_protocol{{end}};
            {{if not $server.DisableIPV6}}listen [::]:{{$port}}{{if $server.ProxyProtocol}} proxy_protocol{{end}};{{end}}
            {{- end}}
            {{end}}
    
            {{if $server.SSL}}
            {{if $server.TLSPassthrough}}
            listen unix:/var/lib/nginx/passthrough-https.sock ssl{{if $server.HTTP2}} http2{{end}} proxy_protocol;
            set_real_ip_from unix:;
            real_ip_header proxy_protocol;
            {{else}}
            {{- range $port := $server.SSLPorts}}
            listen {{$port}} ssl{{if $server.HTTP2}} http2{{end}}{{if $server.ProxyProtocol}} proxy_protocol{{end}};
            {{if not $server.DisableIPV6}}listen [::]:{{$port}} ssl{{if $server.HTTP2}} http2{{end}}{{if $server.ProxyProtocol}} proxy_protocol{{end}};{{end}}
            {{- end}}
            {{end}}
            {{if $server.SSLRejectHandshake}}
            ssl_reject_handshake on;
            {{else}}
            ssl_certificate {{$server.SSLCertificate}};
            ssl_certificate_key {{$server.SSLCertificateKey}};
            {{end}}
            {{end}}
            {{end}}
    
            {{range $setRealIPFrom := $server.SetRealIPFrom}}
            set_real_ip_from {{$setRealIPFrom}};{{end}}
            {{if $server.RealIPHeader}}real_ip_header {{$server.RealIPHeader}};{{end}}
            {{if $server.RealIPRecursive}}real_ip_recursive on;{{end}}
    
            server_tokens "{{$server.ServerTokens}}";
    
            server_name {{$server.Name}};
    
            status_zone {{$server.StatusZone}};
            set $resource_type "ingress";
            set $resource_name "{{$.Ingress.Name}}";
            set $resource_namespace "{{$.Ingress.Namespace}}";
    
            {{- if $server.AppProtectEnable}}
            app_protect_enable {{$server.AppProtectEnable}};
            {{if $server.AppProtectPolicy}}app_protect_policy_file {{$server.AppProtectPolicy}};{{end}}
            {{- end}}
            {{- if $server.AppProtectLogEnable}}
            app_protect_security_log_enable {{$server.AppProtectLogEnable}};
            {{range $AppProtectLogConf := $server.AppProtectLogConfs}}app_protect_security_log {{$AppProtectLogConf}};
            {{end}}
            {{- end}}
    
            {{- if $server.AppProtectDosEnable}}
            app_protect_dos_enable {{$server.AppProtectDosEnable}};
            {{if $server.AppProtectDosPolicyFile}}app_protect_dos_policy_file {{$server.AppProtectDosPolicyFile}};{{end}}
            {{- if $server.AppProtectDosLogEnable}}
            app_protect_dos_security_log_enable on;
            {{if $server.AppProtectDosLogConfFile}}app_protect_dos_security_log {{$server.AppProtectDosLogConfFile}};{{end}}
            {{- end}}
            {{- if $server.AppProtectDosAccessLogDst}}
            set $loggable '0';
            # app-protect-dos module will set it to '1'  if a request doesn't pass the rate limit
            access_log {{ .AppProtectDosAccessLogDst }} log_dos if=$loggable;
            {{- end}}
            {{- if $server.AppProtectDosMonitorURI}}
                    {{- if or $server.AppProtectDosMonitorProtocol $server.AppProtectDosMonitorTimeout}}
            app_protect_dos_monitor uri={{$server.AppProtectDosMonitorURI}}{{if $server.AppProtectDosMonitorProtocol}} protocol={{$server.AppProtectDosMonitorProtocol}}{{end}}{{if $server.AppProtectDosMonitorTimeout}} timeout={{$server.AppProtectDosMonitorTimeout}}{{end}};
                    {{- else}}
            app_protect_dos_monitor "{{$server.AppProtectDosMonitorURI}}";
                    {{- end}}
            {{- end}}
            {{if $server.AppProtectDosName}}app_protect_dos_name "{{$server.AppProtectDosName}}";{{end}}
            {{- end}}
    
            {{if not $server.GRPCOnly}}
            {{range $proxyHideHeader := $server.ProxyHideHeaders}}
            proxy_hide_header {{$proxyHideHeader}};{{end}}
            {{range $proxyPassHeader := $server.ProxyPassHeaders}}
            proxy_pass_header {{$proxyPassHeader}};{{end}}
            {{end}}
    
            {{- if and $server.HSTS (or $server.SSL $server.HSTSBehindProxy)}}
            set $hsts_header_val "";
            proxy_hide_header Strict-Transport-Security;
            {{- if $server.HSTSBehindProxy}}
            if ($http_x_forwarded_proto = 'https') {
            {{else}}
            if ($https = on) {
            {{- end}}
                    set $hsts_header_val "max-age={{$server.HSTSMaxAge}}; {{if $server.HSTSIncludeSubdomains}}includeSubDomains; {{end}}preload";
            }
    
            add_header Strict-Transport-Security "$hsts_header_val" always;
            {{end}}
    
            {{if $server.SSL}}
            {{if not $server.GRPCOnly}}
            {{- if $server.SSLRedirect}}
            if ($scheme = http) {
                    return 301 https://$host:{{index $server.SSLPorts 0}}$request_uri;
            }
            {{- end}}
            {{end}}
            {{- end}}
    
            {{- if $server.RedirectToHTTPS}}
            if ($http_x_forwarded_proto = 'http') {
                    return 301 https://$host$request_uri;
            }
            {{- end}}
    
            {{- with $server.BasicAuth }}
        auth_basic {{ printf "%q" .Realm }};
        auth_basic_user_file {{ .Secret }};
            {{- end }}
    
            {{with $jwt := $server.JWTAuth}}
            auth_jwt_key_file {{$jwt.Key}};
            auth_jwt "{{.Realm}}"{{if $jwt.Token}} token={{$jwt.Token}}{{end}};
    
            {{- if $jwt.RedirectLocationName}}
            error_page 401 {{$jwt.RedirectLocationName}};
            {{end}}
            {{end}}
    
            {{- if $server.ServerSnippets}}
            {{range $value := $server.ServerSnippets}}
            {{$value}}{{end}}
            {{- end}}
    
            {{- range $healthCheck := $server.HealthChecks}}
            location @hc-{{$healthCheck.UpstreamName}} {
                    {{- range $name, $header := $healthCheck.Headers}}
                    proxy_set_header {{$name}} "{{$header}}";
                    {{- end }}
                    proxy_connect_timeout {{$healthCheck.TimeoutSeconds}}s;
                    proxy_read_timeout {{$healthCheck.TimeoutSeconds}}s;
                    proxy_send_timeout {{$healthCheck.TimeoutSeconds}}s;
                    proxy_pass {{$healthCheck.Scheme}}://{{$healthCheck.UpstreamName}};
                    health_check {{if $healthCheck.Mandatory}}mandatory {{end}}uri={{$healthCheck.URI}} interval=
                            {{- $healthCheck.Interval}}s fails={{$healthCheck.Fails}} passes={{$healthCheck.Passes}};
            }
            {{end -}}
    
            {{- range $location := $server.JWTRedirectLocations}}
            location {{$location.Name}} {
                    internal;
                    return 302 {{$location.LoginURL}};
            }
            {{end -}}
    
            {{range $location := $server.Locations}}
            location {{$location.Path}} {
                    set $service "{{$location.ServiceName}}";
                    {{with $location.MinionIngress}}
                    # location for minion {{$location.MinionIngress.Namespace}}/{{$location.MinionIngress.Name}}
                    set $resource_name "{{$location.MinionIngress.Name}}";
                    set $resource_namespace "{{$location.MinionIngress.Namespace}}";
                    {{end}}
                    {{if $location.GRPC}}
                    {{if not $server.GRPCOnly}}
                    error_page 400 @grpcerror400;
                    error_page 401 @grpcerror401;
                    error_page 403 @grpcerror403;
                    error_page 404 @grpcerror404;
                    error_page 405 @grpcerror405;
                    error_page 408 @grpcerror408;
                    error_page 414 @grpcerror414;
                    error_page 426 @grpcerror426;
                    error_page 500 @grpcerror500;
                    error_page 501 @grpcerror501;
                    error_page 502 @grpcerror502;
                    error_page 503 @grpcerror503;
                    error_page 504 @grpcerror504;
                    {{end}}
    
                    {{- if $location.LocationSnippets}}
                    {{range $value := $location.LocationSnippets}}
                    {{$value}}{{end}}
                    {{- end}}
    
                    {{with $jwt := $location.JWTAuth}}
                    auth_jwt_key_file {{$jwt.Key}};
                    auth_jwt "{{.Realm}}"{{if $jwt.Token}} token={{$jwt.Token}}{{end}};
                    {{end}}
    
                    {{- with $location.BasicAuth }}
                    auth_basic {{ printf "%q" .Realm }};
                    auth_basic_user_file {{ .Secret }};
                    {{- end }}
    
                    grpc_connect_timeout {{$location.ProxyConnectTimeout}};
                    grpc_read_timeout {{$location.ProxyReadTimeout}};
                    grpc_send_timeout {{$location.ProxySendTimeout}};
                    grpc_set_header Host $host;
                    grpc_set_header X-Real-IP $remote_addr;
                    grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    grpc_set_header X-Forwarded-Host $host;
                    grpc_set_header X-Forwarded-Port $server_port;
                    grpc_set_header X-Forwarded-Proto $scheme;
    
                    {{- if $location.ProxyBufferSize}}
                    grpc_buffer_size {{$location.ProxyBufferSize}};
                    {{- end}}
                    {{if $.SpiffeClientCerts}}
                    grpc_ssl_certificate /etc/nginx/secrets/spiffe_cert.pem;
                    grpc_ssl_certificate_key /etc/nginx/secrets/spiffe_key.pem;
                    grpc_ssl_trusted_certificate /etc/nginx/secrets/spiffe_rootca.pem;
                    grpc_ssl_server_name on;
                    grpc_ssl_verify on;
                    grpc_ssl_verify_depth 25;
                    grpc_ssl_name {{$location.ProxySSLName}};
                    {{end}}
                    {{if $location.SSL}}
                    grpc_pass grpcs://{{$location.Upstream.Name}};
                    {{else}}
                    grpc_pass grpc://{{$location.Upstream.Name}};
                    {{end}}
                    {{else}}
                    proxy_http_version 1.1;
                    {{if $location.Websocket}}
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection $connection_upgrade;
                    {{- else}}
                    {{- if $.Keepalive}}proxy_set_header Connection "";{{end}}
                    {{- end}}
    
                    {{- if $location.LocationSnippets}}
                    {{range $value := $location.LocationSnippets}}
                    {{$value}}{{end}}
                    {{- end}}
    
                    {{ with $jwt := $location.JWTAuth }}
                    auth_jwt_key_file {{$jwt.Key}};
                    auth_jwt "{{.Realm}}"{{if $jwt.Token}} token={{$jwt.Token}}{{end}};
                    {{if $jwt.RedirectLocationName}}
                    error_page 401 {{$jwt.RedirectLocationName}};
                    {{end}}
                    {{end}}
    
                    {{- with $location.BasicAuth }}
                    auth_basic {{ printf "%q" .Realm }};
                    auth_basic_user_file {{ .Secret }};
                    {{- end }}
    
                    proxy_connect_timeout {{$location.ProxyConnectTimeout}};
                    proxy_read_timeout {{$location.ProxyReadTimeout}};
                    proxy_send_timeout {{$location.ProxySendTimeout}};
                    client_max_body_size {{$location.ClientMaxBodySize}};
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Host $host;
                    proxy_set_header X-Forwarded-Port $server_port;
                    proxy_set_header X-Forwarded-Proto {{if $server.RedirectToHTTPS}}https{{else}}$scheme{{end}};
                    proxy_buffering {{if $location.ProxyBuffering}}on{{else}}off{{end}};
                    {{- if $location.ProxyBuffers}}
                    proxy_buffers {{$location.ProxyBuffers}};
                    {{- end}}
                    {{- if $location.ProxyBufferSize}}
                    proxy_buffer_size {{$location.ProxyBufferSize}};
                    {{- end}}
                    {{- if $location.ProxyMaxTempFileSize}}
                    proxy_max_temp_file_size {{$location.ProxyMaxTempFileSize}};
                    {{- end}}
                    {{if $.SpiffeClientCerts}}
                    proxy_ssl_certificate /etc/nginx/secrets/spiffe_cert.pem;
                    proxy_ssl_certificate_key /etc/nginx/secrets/spiffe_key.pem;
                    proxy_ssl_trusted_certificate /etc/nginx/secrets/spiffe_rootca.pem;
                    proxy_ssl_server_name on;
                    proxy_ssl_verify on;
                    proxy_ssl_verify_depth 25;
                    proxy_ssl_name {{$location.ProxySSLName}};
                    {{end}}
                    {{if $location.SSL}}
                    proxy_pass https://{{$location.Upstream.Name}}{{$location.Rewrite}};
                    {{else}}
                    proxy_pass http://{{$location.Upstream.Name}}{{$location.Rewrite}};
                    {{end}}
                    {{end}}
            }{{end}}
            {{if $server.GRPCOnly}}
            error_page 400 @grpcerror400;
            error_page 401 @grpcerror401;
            error_page 403 @grpcerror403;
            error_page 404 @grpcerror404;
            error_page 405 @grpcerror405;
            error_page 408 @grpcerror408;
            error_page 414 @grpcerror414;
            error_page 426 @grpcerror426;
            error_page 500 @grpcerror500;
            error_page 501 @grpcerror501;
            error_page 502 @grpcerror502;
            error_page 503 @grpcerror503;
            error_page 504 @grpcerror504;
            {{end}}
            {{if $server.HTTP2}}
            location @grpcerror400 { default_type application/grpc; return 400 "\n"; }
            location @grpcerror401 { default_type application/grpc; return 401 "\n"; }
            location @grpcerror403 { default_type application/grpc; return 403 "\n"; }
            location @grpcerror404 { default_type application/grpc; return 404 "\n"; }
            location @grpcerror405 { default_type application/grpc; return 405 "\n"; }
            location @grpcerror408 { default_type application/grpc; return 408 "\n"; }
            location @grpcerror414 { default_type application/grpc; return 414 "\n"; }
            location @grpcerror426 { default_type application/grpc; return 426 "\n"; }
            location @grpcerror500 { default_type application/grpc; return 500 "\n"; }
            location @grpcerror501 { default_type application/grpc; return 501 "\n"; }
            location @grpcerror502 { default_type application/grpc; return 502 "\n"; }
            location @grpcerror503 { default_type application/grpc; return 503 "\n"; }
            location @grpcerror504 { default_type application/grpc; return 504 "\n"; }
            {{end}}
    }{{end}}